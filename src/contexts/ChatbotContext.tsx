import React, { createContext, useContext, useState, ReactNode } from 'react';
import { sendChatMessage } from '@/utils/api.ts';

export interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
  source?: 'local' | 'openrouter';
}

interface ChatbotContextType {
  messages: Message[];
  isLoading: boolean;
  isOpen: boolean;
  addMessage: (message: Omit<Message, 'id' | 'timestamp'>) => void;
  clearMessages: () => void;
  setIsLoading: (loading: boolean) => void;
  setIsOpen: (open: boolean) => void;
  sendMessage: (message: string) => Promise<void>;
}

const ChatbotContext = createContext<ChatbotContextType | undefined>(undefined);

export const useChatbot = () => {
  const context = useContext(ChatbotContext);
  if (context === undefined) {
    throw new Error('useChatbot must be used within a ChatbotProvider');
  }
  return context;
};

interface ChatbotProviderProps {
  children: ReactNode;
}

export const ChatbotProvider: React.FC<ChatbotProviderProps> = ({ children }) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isOpen, setIsOpen] = useState(false);

  const addMessage = (message: Omit<Message, 'id' | 'timestamp'>) => {
    const newMessage: Message = {
      ...message,
      id: Date.now().toString(),
      timestamp: new Date(),
    };
    setMessages(prev => [...prev, newMessage]);
  };

  const clearMessages = () => {
    setMessages([]);
  };

  const sendMessage = async (messageText: string) => {
    if (!messageText.trim()) return;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    addMessage({
      text: messageText,
      isUser: true,
    });

    setIsLoading(true);

    try {
      const data = await sendChatMessage(messageText);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
      addMessage({
        text: data.reply,
        isUser: false,
        source: data.source,
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      
      // Fallback –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
      const fallbackResponse = getFallbackResponse(messageText);
      addMessage({
        text: fallbackResponse,
        isUser: false,
        source: 'local',
      });
    } finally {
      setIsLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ fallback –æ—Ç–≤–µ—Ç–æ–≤
  const getFallbackResponse = (message: string): string => {
    const messageLower = message.toLowerCase();
    
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if (messageLower.includes('–ø—Ä–∏–≤–µ—Ç') || messageLower.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π')) {
      return '–ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ NeuroBoost. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å —É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É, –Ω–æ —è –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö:\n\n‚Ä¢ AI-–∞—É–¥–∏—Ç –±–∏–∑–Ω–µ—Å–∞\n‚Ä¢ ChatGPT-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞—è–≤–æ–∫\n‚Ä¢ –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –ò–ò-—Ä–µ—à–µ–Ω–∏–π\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +7 (707) 506 29 00 –∏–ª–∏ email: galuza_nikita@mail.ru';
    }
    
    // –£—Å–ª—É–≥–∏
    if (messageLower.includes('—É—Å–ª—É–≥') || messageLower.includes('—Å–µ—Ä–≤–∏—Å')) {
      return '–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª—É–≥–∏:\n\nü§ñ AI-–∞—É–¥–∏—Ç –±–∏–∑–Ω–µ—Å–∞ - –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é –ò–ò\nüí¨ ChatGPT-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ —á–∞—Ç-–±–æ—Ç–∞\n‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞—è–≤–æ–∫ - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤\nüöÄ –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –ò–ò-—Ä–µ—à–µ–Ω–∏–π - –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∑–≤–æ–Ω–∏—Ç–µ: +7 (707) 506 29 00';
    }
    
    // –¶–µ–Ω—ã
    if (messageLower.includes('—Ü–µ–Ω–∞') || messageLower.includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å')) {
      return '–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞—à–∏—Ö —É—Å–ª—É–≥ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π. –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.\n\n–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞–º:\nüìû +7 (707) 506 29 00\nüìß galuza_nikita@mail.ru';
    }
    
    // –ö–æ–Ω—Ç–∞–∫—Ç—ã
    if (messageLower.includes('–∫–æ–Ω—Ç–∞–∫—Ç') || messageLower.includes('—Å–≤—è–∑–∞—Ç—å')) {
      return '–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (707) 506 29 00\nüìß Email: galuza_nikita@mail.ru\nüè¢ –ê–¥—Ä–µ—Å: –≥. –ê–ª–º–∞—Ç—ã, —É–ª. –¢–µ–º–∏—Ä—è–∑–µ–≤–∞, 69, –∫–≤. 32\n\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å 9:00 –¥–æ 18:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ê–ª–º–∞—Ç—ã';
    }
    
    // –û–±—â–∏–π –æ—Ç–≤–µ—Ç
    return '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —É –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É. –ù–æ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö:\n\n‚Ä¢ AI-–∞—É–¥–∏—Ç –±–∏–∑–Ω–µ—Å–∞\n‚Ä¢ ChatGPT-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç  \n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞—è–≤–æ–∫\n‚Ä¢ –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –ò–ò-—Ä–µ—à–µ–Ω–∏–π\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∑–≤–æ–Ω–∏—Ç–µ: +7 (707) 506 29 00';
  };

  const value: ChatbotContextType = {
    messages,
    isLoading,
    isOpen,
    addMessage,
    clearMessages,
    setIsLoading,
    setIsOpen,
    sendMessage,
  };

  return (
    <ChatbotContext.Provider value={value}>
      {children}
    </ChatbotContext.Provider>
  );
};